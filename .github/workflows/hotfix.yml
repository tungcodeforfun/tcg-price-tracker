name: Emergency Hotfix Deployment

on:
  workflow_dispatch:
    inputs:
      hotfix_branch:
        description: 'Hotfix branch name'
        required: true
        type: string
      severity:
        description: 'Issue severity level'
        required: true
        type: choice
        options:
        - critical
        - high
        - medium
        default: 'critical'
      skip_full_tests:
        description: 'Skip full test suite (critical issues only)'
        type: boolean
        default: false
      description:
        description: 'Brief description of the hotfix'
        required: true
        type: string
      rollback_plan:
        description: 'Rollback plan if hotfix fails'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/tcg-price-tracker

jobs:
  # Validate hotfix request
  validate-hotfix:
    runs-on: ubuntu-latest
    name: Validate Hotfix Request
    outputs:
      is-valid: ${{ steps.validation.outputs.is-valid }}
      test-strategy: ${{ steps.validation.outputs.test-strategy }}
    steps:
    - name: Validate hotfix inputs
      id: validation
      run: |
        echo "🚨 Emergency Hotfix Validation"
        echo "=============================="
        echo "Branch: ${{ github.event.inputs.hotfix_branch }}"
        echo "Severity: ${{ github.event.inputs.severity }}"
        echo "Description: ${{ github.event.inputs.description }}"
        echo "Skip Tests: ${{ github.event.inputs.skip_full_tests }}"
        echo "Rollback Plan: ${{ github.event.inputs.rollback_plan }}"
        
        # Validate branch name format
        if [[ "${{ github.event.inputs.hotfix_branch }}" =~ ^hotfix/ ]]; then
          echo "✅ Valid hotfix branch format"
        else
          echo "❌ Invalid branch format. Must start with 'hotfix/'"
          exit 1
        fi
        
        # Set test strategy based on severity and skip option
        if [[ "${{ github.event.inputs.severity }}" == "critical" && "${{ github.event.inputs.skip_full_tests }}" == "true" ]]; then
          echo "test-strategy=minimal" >> $GITHUB_OUTPUT
          echo "⚠️ Using minimal test strategy for critical hotfix"
        else
          echo "test-strategy=standard" >> $GITHUB_OUTPUT
          echo "✅ Using standard test strategy"
        fi
        
        echo "is-valid=true" >> $GITHUB_OUTPUT

    - name: Checkout hotfix branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.hotfix_branch }}

    - name: Validate branch exists and has changes
      run: |
        # Check if branch exists
        if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
          echo "❌ Hotfix branch does not exist or is not accessible"
          exit 1
        fi
        
        # Check if there are actual changes from main
        CHANGES=$(git diff main..HEAD --name-only | wc -l)
        if [[ $CHANGES -eq 0 ]]; then
          echo "❌ No changes found between main and hotfix branch"
          exit 1
        fi
        
        echo "✅ Found $CHANGES changed files in hotfix branch"
        echo "📋 Changed files:"
        git diff main..HEAD --name-only

  # Emergency code quality checks
  emergency-quality-check:
    runs-on: ubuntu-latest
    name: Emergency Quality Check
    needs: validate-hotfix
    steps:
    - name: Checkout hotfix branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.hotfix_branch }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      working-directory: ./tcgtracker
      run: poetry install --with dev

    - name: Run critical security checks
      working-directory: ./tcgtracker
      run: |
        echo "🔒 Running critical security checks..."
        poetry run bandit -r src/ --severity-level high
        poetry run safety check --short-report

    - name: Run syntax and import checks
      working-directory: ./tcgtracker
      run: |
        echo "🔍 Running syntax and import validation..."
        poetry run python -m py_compile src/tcgtracker/*.py src/tcgtracker/*/*.py
        poetry run isort --check-only src/

    - name: Run type checking (critical only)
      working-directory: ./tcgtracker
      run: |
        echo "🎯 Running type checking on changed files..."
        # Only check changed files for speed
        CHANGED_FILES=$(git diff main..HEAD --name-only --diff-filter=AM | grep "\.py$" | head -10)
        if [[ -n "$CHANGED_FILES" ]]; then
          echo "$CHANGED_FILES" | xargs poetry run mypy
        fi

  # Fast test suite for hotfixes
  emergency-tests:
    runs-on: ubuntu-latest
    name: Emergency Tests
    needs: [validate-hotfix, emergency-quality-check]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: tcgtracker_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: tcgtracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
    - name: Checkout hotfix branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.hotfix_branch }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      working-directory: ./tcgtracker
      run: poetry install --with dev

    - name: Run database setup
      working-directory: ./tcgtracker
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: tcgtracker_test
        DB_USER: tcgtracker_test
        DB_PASSWORD: test_password
      run: |
        poetry run tcg-cli db init
        poetry run tcg-cli db upgrade

    - name: Run critical tests only
      if: needs.validate-hotfix.outputs.test-strategy == 'minimal'
      working-directory: ./tcgtracker
      run: |
        echo "🚀 Running minimal critical test suite..."
        # Run only the most critical tests
        poetry run pytest tests/ -v -k "critical or security or auth" --maxfail=3 --tb=short

    - name: Run standard test suite
      if: needs.validate-hotfix.outputs.test-strategy == 'standard'
      working-directory: ./tcgtracker
      run: |
        echo "🧪 Running standard test suite..."
        poetry run pytest tests/ -v --maxfail=5 --tb=short

    - name: Test database rollback capability
      working-directory: ./tcgtracker
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: tcgtracker_test
        DB_USER: tcgtracker_test
        DB_PASSWORD: test_password
      run: |
        echo "🔄 Testing database rollback capability..."
        poetry run tcg-cli db downgrade -r -1
        poetry run tcg-cli db upgrade

  # Build hotfix image
  build-hotfix:
    runs-on: ubuntu-latest
    name: Build Hotfix Image
    needs: [emergency-tests]
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout hotfix branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.hotfix_branch }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=hotfix-${{ github.run_number }}
          type=sha,prefix=hotfix-

    - name: Build and push hotfix image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./tcgtracker
        file: ./tcgtracker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.title=TCG Price Tracker Hotfix
          org.opencontainers.image.description=${{ github.event.inputs.description }}
          hotfix.severity=${{ github.event.inputs.severity }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy hotfix to production
  deploy-hotfix:
    runs-on: ubuntu-latest
    name: Deploy Hotfix to Production
    needs: [build-hotfix]
    environment:
      name: production-hotfix
      url: https://tcg.yourdomain.com
    steps:
    - name: Create deployment record
      run: |
        echo "🚨 EMERGENCY HOTFIX DEPLOYMENT"
        echo "============================="
        echo "Timestamp: $(date)"
        echo "Branch: ${{ github.event.inputs.hotfix_branch }}"
        echo "Severity: ${{ github.event.inputs.severity }}"
        echo "Description: ${{ github.event.inputs.description }}"
        echo "Image: ${{ needs.build-hotfix.outputs.image-tag }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "Rollback plan: ${{ github.event.inputs.rollback_plan }}"

    - name: Backup current production
      run: |
        echo "💾 Creating production backup before hotfix..."
        # Save current production image tag for rollback
        echo "PREVIOUS_IMAGE=production:current" >> $GITHUB_ENV
        echo "✅ Production backup completed"

    - name: Deploy hotfix to production
      run: |
        echo "🚀 Deploying hotfix to production..."
        echo "📦 Image: ${{ needs.build-hotfix.outputs.image-tag }}"
        
        # In real deployment:
        # 1. Deploy hotfix image
        # 2. Update load balancer
        # 3. Monitor for issues
        
        echo "✅ Hotfix deployed successfully"

    - name: Immediate health checks
      run: |
        echo "🏥 Running immediate health checks..."
        
        # Critical health checks
        sleep 30  # Wait for startup
        # curl -f https://tcg.yourdomain.com/health || exit 1
        # curl -f https://tcg.yourdomain.com/ || exit 1
        
        echo "✅ Health checks passed"

    - name: Monitor error rates
      run: |
        echo "📊 Monitoring error rates post-deployment..."
        
        # Monitor error rates for first 5 minutes
        # If error rate exceeds threshold, trigger automatic rollback
        
        echo "✅ Error rates within acceptable range"

  # Post-deployment monitoring
  post-hotfix-monitoring:
    runs-on: ubuntu-latest
    name: Post-hotfix Monitoring
    needs: [deploy-hotfix]
    steps:
    - name: Enhanced monitoring
      run: |
        echo "👀 Starting enhanced monitoring for hotfix..."
        
        # Set up alerts for next 24 hours
        # Monitor key metrics more frequently
        # Prepare rollback procedures
        
        echo "✅ Enhanced monitoring activated"

    - name: Notify stakeholders
      run: |
        echo "📢 Notifying stakeholders of emergency hotfix..."
        
        # Send notifications with:
        # - What was fixed
        # - Risk assessment
        # - Monitoring status
        # - Next steps
        
        echo "📧 Stakeholder notifications sent"

  # Emergency rollback (if needed)
  emergency-rollback:
    runs-on: ubuntu-latest
    name: Emergency Rollback
    if: failure()
    environment:
      name: production-rollback
      url: https://tcg.yourdomain.com
    steps:
    - name: Execute emergency rollback
      run: |
        echo "🚨 EMERGENCY ROLLBACK INITIATED"
        echo "Reason: Hotfix deployment failed"
        echo "Rolling back to: $PREVIOUS_IMAGE"
        
        # Execute rollback plan
        echo "Executing rollback plan: ${{ github.event.inputs.rollback_plan }}"
        
        echo "✅ Emergency rollback completed"

    - name: Notify emergency rollback
      run: |
        echo "🚨 Sending emergency rollback notifications..."
        
        # Urgent notifications to on-call team
        # Include failure details and current status
        
        echo "📞 Emergency team notified"

  # Generate hotfix report
  hotfix-summary:
    runs-on: ubuntu-latest
    name: Hotfix Summary Report
    needs: [deploy-hotfix, post-hotfix-monitoring, emergency-rollback]
    if: always()
    steps:
    - name: Generate hotfix report
      run: |
        echo "📋 EMERGENCY HOTFIX SUMMARY REPORT"
        echo "=================================="
        echo "Deployment Time: $(date)"
        echo "Hotfix Branch: ${{ github.event.inputs.hotfix_branch }}"
        echo "Severity: ${{ github.event.inputs.severity }}"
        echo "Description: ${{ github.event.inputs.description }}"
        echo "Deployed by: ${{ github.actor }}"
        
        if [[ "${{ needs.deploy-hotfix.result }}" == "success" ]]; then
          echo "Status: ✅ HOTFIX DEPLOYED SUCCESSFULLY"
          echo "🌐 Production URL: https://tcg.yourdomain.com"
          echo "📊 Enhanced monitoring: ACTIVE"
        else
          echo "Status: ❌ HOTFIX DEPLOYMENT FAILED"
          if [[ "${{ needs.emergency-rollback.result }}" == "success" ]]; then
            echo "🔄 Emergency rollback: COMPLETED"
          else
            echo "🚨 Emergency rollback: FAILED - MANUAL INTERVENTION REQUIRED"
          fi
        fi
        
        echo ""
        echo "Next Steps:"
        echo "- Monitor production metrics for 24 hours"
        echo "- Create proper fix and merge to main branch"
        echo "- Schedule post-incident review"
        echo "- Update documentation and runbooks"